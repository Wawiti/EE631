#include "opencv2/core.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/calib3d.hpp"
#include <stdio.h>
#include <iostream>
#include <sstream>
#include <string>
#include <fstream>

using namespace cv;
using namespace std;

//======================== Main Loop ===========================
int main() {
	// ------------- Initialize ALL VARIABLES -----------------------
	Mat LCamMat, LDisCoef, RCamMat, RDisCoef, R, T, E, F, R1, R2, P1, P2, Q;
	int ImageSet = 4;

	// --------------- Import data from file ------------------------
	FileStorage fs("AllParameters.yml", FileStorage::READ);

	fs["LcameraMatrix"] >> LCamMat;
	fs["LdistCoeffs"] >> LDisCoef;
	fs["RcameraMatrix"] >> RCamMat;
	fs["RdistCoeffs"] >> RDisCoef;
	fs["R"] >> R;
	fs["T"] >> T;
	fs["E"] >> E;
	fs["F"] >> F;
	fs["R1"] >> R1;
	fs["R2"] >> R2;
	fs["P1"] >> P1;
	fs["P2"] >> P2;
	fs["Q"] >> Q;

	// --------------- Read in and process images -------------------
	Mat LOrig, LOrigCrop;		// Get an initial image to subtract from subsequent ones
	Mat ROrig, ROrigCrop;

	// Load Images
	char LPathOrig[50];
	char RPathOrig[50];
	//sprintf(LPathOrig, "Images\\Ball%01dL%02d.bmp", ImageSet, 0);
	//sprintf(RPathOrig, "Images\\Ball%01dR%02d.bmp", ImageSet, 0);
	sprintf(LPathOrig, "Images\\Set%01d\\Set%01dL%02d.bmp", ImageSet, ImageSet, 0);
	sprintf(RPathOrig, "Images\\Set%01d\\Set%01dR%02d.bmp", ImageSet, ImageSet, 0);
	cout << "Left Path: " << LPathOrig << " Right Path: " << RPathOrig << endl;
	LOrig = imread(LPathOrig, CV_LOAD_IMAGE_GRAYSCALE);
	ROrig = imread(RPathOrig, CV_LOAD_IMAGE_GRAYSCALE);

	// Crop Original
	Rect myROIL(290, 10, 150, 260); // x, y, width, height
	Rect myROIR(200, 10, 150, 260); // x, y, width, height
	LOrig(myROIL).copyTo(LOrigCrop);
	ROrig(myROIR).copyTo(ROrigCrop);
	//LOrig.copyTo(LOrigCrop);
	//ROrig.copyTo(ROrigCrop);

	for (int i = 0; i < 100; i++) {
		// Read in images one at a time and proccess them
		Mat LIm, LImCrop, LImThresh;
		Mat RIm, RImCrop, RImThresh;
		char LPath[50];
		char RPath[50];
		//sprintf(LPath, "Images\\Ball%01dL%02d.bmp", ImageSet, i);
		//sprintf(RPath, "Images\\Ball%01dR%02d.bmp", ImageSet, i);
		sprintf(LPath, "Images\\Set%01d\\Set%01dL%02d.bmp", ImageSet, ImageSet, i);
		sprintf(RPath, "Images\\Set%01d\\Set%01dR%02d.bmp", ImageSet, ImageSet, i);
		LIm = imread(LPath, CV_LOAD_IMAGE_GRAYSCALE);
		RIm = imread(RPath, CV_LOAD_IMAGE_GRAYSCALE);
		if (!LIm.data || !RIm.data) {
			cout << "couldn't load image " << i << endl;
			cout << "Left Path: " << LPath << endl;
			cout << "Right Path: " << RPath << endl;
			system("pause");
			return -1;
		}

		// Image Loaded, crop
		LIm(myROIL).copyTo(LImCrop);
		RIm(myROIR).copyTo(RImCrop);
		//LIm.copyTo(LImCrop);
		//RIm.copyTo(RImCrop);
		LImThresh = LImCrop - LOrigCrop;	// Subtract very first image for background removal
		RImThresh = RImCrop - ROrigCrop;	// Subtract very first image for background removal
		
		// Blur image to reduce noise
		GaussianBlur(LImThresh, LImThresh, Size(9, 9), 2, 2);
		GaussianBlur(RImThresh, RImThresh, Size(9, 9), 2, 2);

		// Image Loaded, threshold image
		threshold(LImThresh, LImThresh, 8, 255, THRESH_BINARY);
		threshold(RImThresh, RImThresh, 8, 255, THRESH_BINARY);

		//find the ball
		Mat LWhiteLocations, RWhiteLocations;
		findNonZero(LImThresh, LWhiteLocations);
  		findNonZero(RImThresh, RWhiteLocations);

		// Find group of pixels greater than 20 in both images?
		if ((LWhiteLocations.total() > 15) && (RWhiteLocations.total() > 15)) {

			// Find center of balls in both images
			float LxCent = 0, LyCent = 0;
			for (int i = 0; i < LWhiteLocations.total(); i++) {
				LxCent = LxCent + LWhiteLocations.at<Point>(i).x;
				LyCent = LyCent + LWhiteLocations.at<Point>(i).y;
			}
			LxCent = LxCent / LWhiteLocations.total();
			LyCent = LyCent / LWhiteLocations.total();
			cout << "Left Center: " << LxCent << ", " << LyCent << endl;

			float RxCent = 0, RyCent = 0;
			for (int i = 0; i < RWhiteLocations.total(); i++) {
				RxCent = RxCent + RWhiteLocations.at<Point>(i).x;
				RyCent = RyCent + RWhiteLocations.at<Point>(i).y;
			}
			RxCent = RxCent / RWhiteLocations.total();
			RyCent = RyCent / RWhiteLocations.total();
			cout << "Right Center: " << RxCent << ", " << RyCent << endl;

			circle(LIm, Point((int)LxCent+290, (int)LyCent+10), 4, 0, -1);
			circle(RIm, Point((int)RxCent+200, (int)RyCent+10), 4, 0, -1);
		}
		



		// rectify point

		// Display Output
		cout << "Displaying Image " << i << endl;
		namedWindow("Left", CV_WINDOW_AUTOSIZE);
		namedWindow("Right", CV_WINDOW_AUTOSIZE);
		while (1) {
			imshow("Left", LIm);
			imshow("Right", RIm);
			int keypress = waitKey(30);
			if (keypress == 27) {			// If user presses esc key then quit program
				cout << "Program exited by user" << endl;
				return -1;
			}else if (keypress == 32) {		// If user presses space bar than advance to next image
				break;
			}
		}

		// find z distance


		// find x and y positions
		

	}
	return 0;
}
