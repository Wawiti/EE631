#include "opencv2/core.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/calib3d.hpp"
#include <stdio.h>
#include <iostream>
#include <sstream>
#include <string>
#include <fstream>

using namespace cv;
using namespace std;

//======================== Main Loop ===========================
int main() {
	// ------------- Initialize ALL VARIABLES -----------------------
	Mat LCamMat, LDisCoef, RCamMat, RDisCoef, R, T, E, F, R1, R2, P1, P2, Q;
	int ImageSet = 3;

	// --------------- Import data from file ------------------------
	FileStorage fs("AllParameters.yml", FileStorage::READ);

	fs["LcameraMatrix"] >> LCamMat;
	fs["LdistCoeffs"] >> LDisCoef;
	fs["RcameraMatrix"] >> RCamMat;
	fs["RdistCoeffs"] >> RDisCoef;
	fs["R"] >> R;
	fs["T"] >> T;
	fs["E"] >> E;
	fs["F"] >> F;
	fs["R1"] >> R1;
	fs["R2"] >> R2;
	fs["P1"] >> P1;
	fs["P2"] >> P2;
	fs["Q"] >> Q;

	// --------------- Read in and process images -------------------
	Mat LOrig, LOrigCrop;		// Get an initial image to subtract from subsequent ones
	Mat ROrig, ROrigCrop;

	// Load Images
	char LPathOrig[50];
	char RPathOrig[50];
	//sprintf(LPathOrig, "Images\\Ball%01dL%02d.bmp", ImageSet, 0);
	sprintf(LPathOrig, "Images\\Set%01d\\Ball%01dL%02d.bmp", ImageSet, ImageSet, 0);
	//sprintf(RPathOrig, "Images\\Ball%01dR%02d.bmp", ImageSet, 0);
	sprintf(RPathOrig, "Images\\Set%01d\\Ball%01dR%02d.bmp", ImageSet, ImageSet, 0);
	LOrig = imread(LPathOrig, CV_LOAD_IMAGE_GRAYSCALE);
	ROrig = imread(RPathOrig, CV_LOAD_IMAGE_GRAYSCALE);

	// Crop Original
	Rect myROIL(290, 10, 150, 265); // x, y, width, height
	Rect myROIR(200, 10, 150, 265); // x, y, width, height
	LOrig(myROIL).copyTo(LOrigCrop);
	ROrig(myROIR).copyTo(ROrigCrop);

	for (int i = 0; i < 32; i++) {
		// Read in Left images one at a time
		Mat LIm, LImCrop, LImThresh;
		Mat RIm, RImCrop, RImThresh;
		char LPath[50];
		char RPath[50];
		sprintf(LPath, "Images\\Ball%01dL%02d.bmp", ImageSet, i);
		sprintf(RPath, "Images\\Ball%01dR%02d.bmp", ImageSet, i);
		LIm = imread(LPath, CV_LOAD_IMAGE_GRAYSCALE);
		RIm = imread(RPath, CV_LOAD_IMAGE_GRAYSCALE);
		if (!LIm.data || !RIm.data) {
			cout << "couldn't load image " << i << endl;
			cout << "Left Path: " << LPath << endl;
			cout << "Right Path: " << RPath << endl;
			system("pause");
			return -1;
		}

		// Image Loaded, crop
		LIm(myROIL).copyTo(LImCrop);
		RIm(myROIR).copyTo(RImCrop);
		LImThresh = LImCrop - LOrigCrop;	// Subtract very first image for background removal
		RImThresh = RImCrop - ROrigCrop;	// Subtract very first image for background removal
		
		// Blur image to reduce noise
		GaussianBlur(LImThresh, LImThresh, Size(9, 9), 2, 2);
		GaussianBlur(RImThresh, RImThresh, Size(9, 9), 2, 2);

		// Image Loaded, threshold image
		threshold(LImThresh, LImThresh, 5, 255, THRESH_BINARY);
		threshold(RImThresh, RImThresh, 5, 255, THRESH_BINARY);

		// Display Output
		namedWindow("Left", CV_WINDOW_AUTOSIZE);
		namedWindow("Right", CV_WINDOW_AUTOSIZE);
		while (1) {
			imshow("Left", LImThresh);
			imshow("Right", RImThresh);
			if (waitKey(30) == 27) {
				//cout << "Program exited by user" << endl;
				//return -2;
				break;
			}
		}
	}

	system("pause");
	return 0;
}
