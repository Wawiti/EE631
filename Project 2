#include "opencv2/core.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/calib3d.hpp"
#include <stdio.h>
#include <iostream>
#include <sstream>
#include <string>
#include <fstream>

using namespace cv;
using namespace std;

//======================== Main Loop ===========================
int main() {
	// ------------- Initialize ALL VARIABLES -----------------------
	Mat LCamMat, LDisCoef, RCamMat, RDisCoef, R, T, E, F, R1, R2, P1, P2, Q;
	int ImageSet = 1;

	// --------------- Import data from file ------------------------
	FileStorage fs("AllParameters.yml", FileStorage::READ);

	fs["LcameraMatrix"] >> LCamMat;
	fs["LdistCoeffs"] >> LDisCoef;
	fs["RcameraMatrix"] >> RCamMat;
	fs["RdistCoeffs"] >> RDisCoef;
	fs["R"] >> R;
	fs["T"] >> T;
	fs["E"] >> E;
	fs["F"] >> F;
	fs["R1"] >> R1;
	fs["R2"] >> R2;
	fs["P1"] >> P1;
	fs["P2"] >> P2;
	fs["Q"] >> Q;

	// --------------- Read in and process images -------------------
	for (int i = 20; i < 32; i++) {
		// Read in images one at a time
		Mat Im, ImCrop, ImThresh;
		char Path[50];
		sprintf(Path, "Images\\Ball%01dL%02d.bmp", ImageSet, i);
		Im = imread(Path, CV_LOAD_IMAGE_COLOR);
		if (!Im.data) {
			cout << "couldn't load image " << i << endl;
			cout << "Path: " << Path << endl;
			system("pause");
			return -1;
		}

		// Image Loaded, crop
		Rect myROI(290, 50, 150, 200);
		Im(myROI).copyTo(ImCrop);
		// Image Loaded, threshold image
		threshold(ImCrop, ImThresh, 40, 255, 0);
		
		namedWindow("Vogel", CV_WINDOW_AUTOSIZE);
		while (1) {
			imshow("Vogel", ImThresh);
			if (waitKey(30) == 27) {
				cout << "Program exited by user" << endl;
				return 0;
				break;
			}
		}
	}

	system("pause");
	return 0;
}
